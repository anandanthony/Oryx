parameters:
  ascName: OryxMCR
  acrName: oryxdevmcr.azurecr.io

steps:
- script: |
    if [ "$(BuildBuildImages)" != "true" ] && [ "$(BuildRuntimeImages)" != "true" ] && [ "$(TestIntegration)" != "true" ]
    then
      echo "Invalid configuration."
      echo "Variable 'BuildBuildImages' or 'BuildRuntimeImages' needs to be 'true' to run this build."
      exit 1
    fi
  displayName: 'Validate pipeline run'

- checkout: self
  clean: true

- task: ShellScript@2
  displayName: 'Build Oryx.sln'
  inputs:
    scriptPath: ./build/build-solution.sh

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection - OSS Compliance'
  inputs:
    ignoreDirectories: '$(Build.SourcesDirectory)/tests'

- task: Docker@1
  displayName: Container registry login
  inputs:
    command: login
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrName }}

- task: ShellScript@2
  displayName: 'Build build images'
  inputs:
    scriptPath: ./build/build-buildimages.sh
  condition: and(succeeded(), eq(variables['BuildBuildImages'], 'true'))

- task: ShellScript@2
  displayName: 'Build runtime images'
  inputs:
    scriptPath: ./build/build-runtimeimages.sh
  condition: and(succeeded(), eq(variables['BuildRuntimeImages'], 'true'))

- task: ShellScript@2
  displayName: 'Test script generator'
  inputs:
    scriptPath: ./build/test-buildscriptgenerator.sh
  condition: and(succeeded(), eq(variables['TestBuildImages'], 'true'))

- task: ShellScript@2
  displayName: 'Test startup script generators'
  inputs:
    scriptPath: ./build/test-startupscriptgenerators.sh
  condition: and(succeeded(), eq(variables['TestRuntimeImages'], 'true'))

- task: ShellScript@2
  displayName: 'Test build images'
  inputs:
    scriptPath: ./build/test-buildimages.sh
    args: skipBuildingImages
  condition: and(succeeded(), eq(variables['TestBuildImages'], 'true'))

- task: ShellScript@2
  displayName: 'Test runtime images'
  inputs:
    scriptPath: ./build/test-runtimeimages.sh
    args: skipBuildingImages
  condition: and(succeeded(), eq(variables['TestRuntimeImages'], 'true'))

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Artifacts'
  inputs:
    artifactName: drop
  condition: and(succeeded(), eq(variables['TestIntegration'], 'true'))

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Pull and Retag recently built oryx build and runtime images'
  inputs:
    type: FilePath
    scriptPath: ./vsts/scripts/pullandretag.sh
    args: $(System.ArtifactsDirectory)/drop/images/build-images-acr.txt $(System.ArtifactsDirectory)/drop/images/runtime-images-acr.txt
  condition: and(succeeded(), eq(variables['TestIntegration'], 'true'))

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Build a build image for tests'
  inputs:
    type: FilePath
    scriptPath: ./build/build-testimage.sh
  condition: and(succeeded(), eq(variables['TestIntegration'], 'true'))

- task: ShellScript@2
  displayName: 'Test integration'
  inputs:
    scriptPath: ./build/test-integration.sh
    args: $(TestIntegrationCaseFilter)
  condition: and(succeeded(), eq(variables['TestIntegration'], 'true'))

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Create File to Notify Integration Test has run successfully'
  inputs:
    type: InlineScript
    script: 'echo "success">$(Build.SourcesDirectory)/artifacts/$(Build.BuildNumber).txt'
  condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual'), eq(variables['Build.DefinitionName'], 'Oryx-CI'))


- task: CopyFiles@2
  displayName: 'Copy source projects output to artifacts folder'
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    contents: 'src/**/bin/**/*.*'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    overWrite: true
    flattenFolders: true
  condition: true

- task: CopyFiles@2
  displayName: 'Copy artifacts from source repo to agent artifacts folder'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/artifacts'
    contents: '**/*.*'
    targetFolder: $(Build.ArtifactStagingDirectory)
    overWrite: true
  condition: true

- task: PublishTestResults@2
  inputs:
    testRunner: 'xUnit'
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/testResults/*.xml'
    mergeTestResults: true
  condition: true

- task: Docker@0
  displayName: 'Push Build image to DockerHub'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryConnection: oryx
    action: 'Push images'
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/images/build-images.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: false
  condition: and(succeeded(), eq(variables['PushBuildImages'], 'true'), eq(variables['BuildBuildImages'], 'true'), eq(variables['PushToDockerHub'], 'true'))

- task: Docker@1
  displayName: 'Push build images to ACR'
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrName }}
    command: 'Push an image'
    pushMultipleImages: true
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/images/build-images-acr.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: false
  condition: and(succeeded(), eq(variables['PushBuildImages'], 'true'), eq(variables['BuildBuildImages'], 'true'))

- task: Docker@0
  displayName: 'Push runtime images to DockerHub'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryConnection: oryx
    action: 'Push images'
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/images/runtime-images.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: false
  condition: and(succeeded(), eq(variables['PushRuntimeImages'], 'true'), eq(variables['BuildRuntimeImages'], 'true'), eq(variables['PushToDockerHub'], 'true'))

- task: Docker@1
  displayName: 'Push runtime images to ACR'
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrName }}
    command: 'Push an image'
    pushMultipleImages: true
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/images/runtime-images-acr.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: false
  condition: and(succeeded(), eq(variables['PushRuntimeImages'], 'true'), eq(variables['BuildRuntimeImages'], 'true'))

- task: ShellScript@2
  displayName: 'Clean up Docker containers and images'
  inputs:
    scriptPath: ./vsts/scripts/dockerCleanup.sh
  condition: or(eq(variables['TestBuildImages'], 'true'), eq(variables['TestRuntimeImages'], 'true'), eq(variables['TestIntegration'], 'true'))

- task: ShellScript@2
  displayName: 'Clean up Docker mounted directories'
  inputs:
    scriptPath: ./vsts/scripts/dockerArtifactsRemoval.sh
  condition: or(eq(variables['TestBuildImages'], 'true'), eq(variables['TestRuntimeImages'], 'true'), eq(variables['TestIntegration'], 'true'))

- task: ShellScript@2
  displayName: 'Generate release notes'
  inputs:
    scriptPath: ./vsts/scripts/generate-release-notes.sh
  condition: and(succeeded(), eq(variables['PushBuildImages'], 'true'), eq(variables['BuildBuildImages'], 'true'))

- task: ArchiveFiles@2
  displayName: 'Archive docker files and scripts for Oryx build and runtime images'
  inputs:
    rootFolderOrFile: images
    archiveFile: '$(Build.ArtifactStagingDirectory)/images/dockerFiles.zip'
  condition: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: true
